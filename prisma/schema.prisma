// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}
// Change this part
datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL") // uses connection pooling
  directUrl = env("DATABASE_URL_UNPOOLED") // uses a direct connection
}
// prisma/schema.prisma
model Baby {
  id           Int               @id @default(autoincrement())
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  name         String
  birthday     DateTime
  measurements BabyMeasurement[]
  feeds        Feed[]
  poops        Poop[]
}

model BabyMeasurement {
  id                    Int      @id @default(autoincrement())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  babyId               Int
  baby                 Baby     @relation(fields: [babyId], references: [id])
  weight               Int      // in grams
  height               Float    // in cm
  dailyMilkAmount      Int      // calculated from weight
  feedsPerDay          Int      @default(8)
  averageFeedAmount    Int      @default(0) // dailyMilkAmount / feedsPerDay
}

model Feed {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  babyId    Int
  baby      Baby     @relation(fields: [babyId], references: [id])
  feedTime  DateTime
  amount    Int      // in ml
  type      String   @default("main") // can be "main" or "additional"
  foodId    Int      @default(4)
  food      Food     @relation(fields: [foodId], references: [id])
}

model Poop {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  babyId      Int
  baby        Baby     @relation(fields: [babyId], references: [id])
  poopTime    DateTime
  color       String
  consistency String
  amount      Int      // in grams
}


model Food {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  unit      Unit?    @relation(fields: [unitId], references: [id])
  unitId    Int?
  emoji     String?  @default("üçº")
  feeds     Feed[]
}

model Unit {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  emoji     String?  @default("üíß")
  foods     Food[]
}

